This is a solution for the Springer Nature Code Challenge.

The URL of the repository is the following - https://github.com/SNDigitalBerlinCodingChallenge/stm_challenge_arthur_klezovich/tree/Arturs-Klezovics-Branch

When reading the code please be aware that for the user the canvas cell addressing 
starts with 1 and is done in the (x,y) form, however, the backing datastructure 
a 2D array called grid (member of the object of the Canvas class ) is adressed starting 
from 0 and is done in the grid[y-1][x-1] form for a (x,y) coordinate provided of the user.

Following the clean code methodology minimal comments are provided (to not convolute the code) 
and the clarity of the code is obtained by suitably naming variables, routines and providing 
a nice break-down of the problem into classes and their methods. 


=================    TABLE OF CONTENTS   ====================
1. How to RUN the project 
2. Project architecture
3. Discussion of automated testing
4. Discussion of the edge cases


=== 1. How to RUN the project === 

In order to run the project the following needs to be done ... 

1. Import it into your IDE ( such as Eclipse ) from Git
2. Run the "App.java" class from "com.klezovich.stm_challenge" package
3. The main method of this class will start the drawing program. 



=== 2. Project architecture === 

The main method of the application is the main method in "App.java" class from 
the "com.klezovich.stm_challenge" package. 

When it starts it creates an instance of the "Canvas" class ( can be found in the "com.klezovich.stm_challenge.domain" )
package. The canvas class encapsulates the functionality needed to solve this problem.

User input is parsed, validated an encapsulated into an object of the "CanvasCommand" class.
Then this "CanvasCommand" object is passed on to an instance of a "Canvas" class .execute( CanvasCommand cc ) method. 
Input validation is done in the "CanvasCommand" class .parseCommandString( String s ) method 
and an exception will be thrown if something is wrong (for example the line is neither horizontal nor vertical ). 


Once the command is executed a .draw() method is called on the "Canvas" object. This 
will print the output to the command line.


Now, internally, a canvas is just a 2D array of chracters. This is the natural representation 
of the canvas objects. Each cell in an array is defined by (x,y) coordinate pair and can 
store one character ( 'x' if a line has been drawn through this cell or 'c' if a bucket fill command has 
been used).

The execution of each command is done by a separate method as can be seen in the 
.execute() method of the canvas object. 

The implementation for them is rather simple - they just fill in the cells 
of the 2D array using a relevant loop (please see the relevant method), except for the "Bucket Fill (B)" command.

The bucket fill command does a "bredth-first" search around the target canvas cell ( supplid as the argument 
to the "Bucket Fill" command ). The 4 cells (upper, lower, left and right) around the target 
cell are added to the queue if they exist (for example cell (1,1) does not have a left neighbour ) and do not contain a part of a line or a rectangle. The target
cell is colored.

After this the cells are popped out for the queue, their neighbours are added ( if they meet the criteria ) of course 
and they are colored. This process is repeated until the queue is empty. 


 
=== 3. Discussion of automated testing === 

All automated tests are located in the "/stm-challenge/src/test/java/com/klezovich/stm_challenge/AppTest.java" class.
To run automated test - select this class and select "Run as JUnit Test"

If you look inside you will see that a "CanvasTester" class is used to test them.

The "CanvasTester" has a single static method .test(File f) which takes in a file 
of a special format. All such files with automated tests are stored in the "/resources/canvas test files/" directory.

The file has the following format:
1. List of command to execute
2. How the resulting canvas should look like

Here is an example of such file 

== FILE BEGIN == 
C 5 5
L 1 1 2 1
== Canvas 5 5 ==
-------
|xx   |
|     |
|     |
|     |
|     |
-------
== END OF FILE ==

What happens during the test is the following:

1. A canvas object "canvas1" is created 
2. Command from the top of the file are parse out 
3. Commands are executed on "canvas1" object 

4. A canvas object "canvas2" is constructed by READING in the ASCII drawing of canvas from the bottom
5. Objects "canvas1" and "canvas2" are compared by using the .equals() method

In most of the tests they match, but in some tests the drawing is intentionally different 
from the the command output ( for example see the "canvas 3x3 wrong" file ) to test that 
the CanvasTester.test() method will correctly return "false"

The most important test is located in the file "total test" in the "/resources/canvas test files"
directory. It uses all of the functionality of the editor in a complex way and therefore if 
this automated test pases we can have very high confidence that the software is working as 
expected.

=== 4. Discussion of the edge cases === 

The edge cases will be discussed on a per-comand basis:

4.1 Quit command 
There are no edge-cases here, because internally a call to 'System.exit(0)' is made. 

4.2 Create command 
  
  Below a command, which simulates an edge case is shown along with the excepted output.

  4.2.1 'C 0 0'   -> the program will not allow to do this and will display an error message
  4.2.2 'C -1 1'  -> the program will not allow to do this and will display an error message
  4.2.3 'C 1 -1'  -> the program will not allow to do this and will display an error message
  4.2.4 'C -1 -1' -> the program will not allow to do this and will display an error message
  4.2.5 'C 0 1'   -> the program will not allow to do this and will display an error message
  4.2.6 'C 1 0'   -> the program will not allow to do this and will display an error message
  4.2.7 'C 1 1'   -> OK 
  4.2.8 'C 1 2'   -> OK 
  4.2.9 'C 2 2'   -> OK 
  4.2.10 'C 100 100' -> OK 
  4.2.11 'C 200 200' -> an error will be displayed value of maxCanvasDim exceeded

  An in general the canvas command parser is written in such a way that it requres that 
  both coordinates be non-negative and lower than some reasonable limit (maxCanvasDim static field in the CanvasCommand class)
  
  
4.3 Draw line command 

  Below a sequence of commands, which simulates an edge case is shown along with the excepted output.

  The "Draw Line" command coordinates are validated to ensure that they 
  are non-negative, fit within the canvas and the line is either vertical or horizontal.

  4.3.1 L 0 0 0 0 -> an error will be displayed 
  4.3.2 L 0 1 0 1 -> an error will be displayed
  4.3.3 L 1 0 1 0  -> an error will be displayed
  4.3.4 L -1 -1 1 1  -> an error will be displayed
   
  4.3.5 A line with one point outside of the canvas 
    C 3 3 
    L 1 1 1 5 ->  An error message will be displayed
   
  4.3.6 A line with both points outside of the canvas
    C 5 10 
    L 20 20 20 30 ->  An error message will be displayed
    
  4.3.7 A line where both points are the same 
    C 3 3 
    L 1 1 1 1 -> this is OK, a single "pixel" will have an 'x' in it
  
  4.3.8 A line which is neither horizontal nor vertical 
    C 5 5 
    L 1 2 3 4 -> an error message will be displayed saying that line is neither horizontal 
    nor vertical

4.4 Draw rectangle command 
   
   4.4.1 R 0 0 0 0 -> an error will be displayed
   4.4.2 R 0 1 0 1 -> an error will be displayed
   4.4.3 R 1 0 1 0 -> an error will be displayed 
   4.4.4 R -1 -1 1 1 -> an error will be displayed
   
   An in general input validation is done to ensure that each rectangle 
   coordinate is positive.
   
   4.3.5 A rectangle with one point outside of the canvas 
    C 3 3 
    R 1 1 1 5 ->  An error message will be displayed
   
  4.3.6 A rectangle with both points outside of the canvas
    C 5 10 
    R 20 20 20 30 ->  An error message will be displayed
    
  4.3.7 A rectangle where both points are the same 
    C 3 3 
    R 1 1 1 1 -> this is OK, a single "pixel" will have an 'x' in it
  
 
4.5 Bucket fill command   

The simplest possible uses of the fill command are the following along with their outputs ...

Commands:
C 3 3 
B 1 1 c

Result:
-----
|ccc|
|ccc|
|ccc|
-----



Commands:
C 3 3 
L 2 1 2 3
B 1 1 c

Result:
-----
|cx |
|cx |
|cx |
-----




Commands:
C 6 6 
R 3 3 5 5 
B 4 4 a

Output:
--------
|      |
|      |
|  xxx |
|  xax |
|  xxx |
|      |
--------



Commands:
C 10 10 
R 2 2 9 9 
R 4 4 6 6 
B 3 3 c

Output:
------------
|          |
| xxxxxxxx |
| xccccccx |
| xcxxxccx |
| xcx xccx |
| xcxxxccx |
| xccccccx |
| xccccccx |
| xxxxxxxx |
|          |
------------

Commands:
C 10 10 
L 2 1 2 10
R 4 4 9 9 
B 3 10 c

Output: 
------------
| xcccccccc|
| xcccccccc|
| xcccccccc|
| xcxxxxxxc|
| xcx    xc|
| xcx    xc|
| xcx    xc|
| xcx    xc|
| xcxxxxxxc|
| xcccccccc|
------------

These are the simple cases, where we have a good intuitive understanding of what must happen.
Let's look at cases, which seem a bit more sophisticated.

The first question which comes to mind is what do we do if a bucket-fill command is executed 
over a point, which has an 'x' in it. 

In my view - NOTHING needs to be done, otherwise, it will break the geometry of the drawing.

Let's see why ...

When a request is made to use a bucket fill tool on a cell, which contains an 'x' there is one 
of the two things that we can do ... 

A1. Fill this cell with this color 'c' and 
  A1.1 Do NOT try to fill its neighbours and their neighbours (expand the fill)
  A1.2 Try to "expand the fill" 
  
A2. Not fill this cell with the color 'c' 
  A2.1 Try to "expand the fill"  
  A2.2 Not try to "expand the fill"
  
  
If we look at A1.1 the following scenario comes to mind 
C 3 3 
L 2 1 2 3
B 2 1 c 

-----
| c |
| x |
| x |
-----

However, if we we then do ... 
B 1 1 f

We get ...
-----
|fff|
|fxf|
|fxf|
-----

The geometry is broken ! The fill was able to get to the both sides of the line
Therefore A1.1 is not a good option, and so is A1.2, because they both "break the geomerty"
by forming a gap in the line. 

If we then turn to A2.1 this creates an even bigger problem 
C 3 3
L 2 1 2 3
B 1 1 c 

And then we will paint both sides of the line (L 2 1 2 3) withou changing it. Bad idea.

Therefore, A2.2 was chosen as the desired implementation.

This makes sense, because the bucket fill command should be applied to open connected areas on the canvas, 
it just that we define a connected area by specifying a point in it in the command. However, a point 
on the line is not part of any open connected area on the grid.

The next edge case we need to consider is the following 

Commands:
C 5 5 
L 5 1 3 5
L 5 1 5 3
L 5 3 1 3
L 1 3 1 2
B 2 2 c

Output:
-------
| xxxx|
|xcccx|
|xxxxx|
|     |
|     |
-------

The question here is should the bucket fill, which must obviously fill the inside 
of the rectangle be able to "slip out" through the top-left corner, which is missing. 

I've decided that NO, and this is why in the getNeighbourCells() private method of the 
"Canvas" class only the 4 neighbours are search (left, right, top, bottom, but not top left).
This simulates the case where we draw a rectangle in say MsPaint and then remove exactly one 
pixel on the edge. In my view - the bucket fill should not fill everything. This is because
It is still boun by the top and left vertical lines

However, it is easy to alter the implementation by changing exactly one method.




